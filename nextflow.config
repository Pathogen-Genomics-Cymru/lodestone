params {

  // help message
  help = ''

  // input directory
  input_dir = ""

  // filetype fastq or bam
  filetype = 'fastq'

  // glob pattern for input files
  pattern = '*_R{1,2}.fastq.gz'

  // output directory
  output_dir = ""

  // unmix myco 'yes' or 'no'
  unmix_myco = 'no'

  // principal species in each sample, assuming genus Mycobacterium, default null
  // otherwise takes 1 of 10 values: abscessus, africanum, avium, bovis, chelonae, chimaera, fortuitum, intracellulare, kansasii, tuberculosis
  species = 'null'

  // path to kraken2 database
  kraken_db = "kraken2"

  // path to bowtie2 index
  bowtie2_index = "bowtie2"

  // name of the bowtie index, e.g. hg19_1kgmaj
  bowtie_index_name = "hg19_1kgmaj"

  // run VCFMIX 'yes' or 'no' (set to no for synthetic samples)
  vcfmix = 'yes'
  
  resistance_profiler = "tb-profiler"
  
  update_tbprofiler = "no"


  // path to singularity recipes directory (needed to strip software versions in getversion)
  sing_dir = "${baseDir}/singularity"

  // path to this config file (needed to strip database versions in getversion)
  config_dir = "${baseDir}/nextflow.config"

  // path to the Afanc Myco database
  afanc_myco_db = "${baseDir}/Mycobacteriaciae_DB_7.0/"
  
  //path to resources directory
  resource_dir = "${baseDir}/resources"
  refseq = "${resource_dir}/assembly_summary_refseq.txt"
  container_enabled = "false"
}

profiles {
    climb {
       process{
            withLabel:run_local {
                executor = "local"
                container = null
            }
        }
        
        includeConfig 'config/climb_k8s.config'
        includeConfig 'config/containers.config'
        
        //add in docker configs as the above config file is generic for any containerised run
        docker.enabled = true
        fixOwnership = true
        runOptions = "-u \$(id -u):\$(id -g)"
        
        k8s {
           computeResourceType = 'Job'
        }
        
            process {
           executor = 'k8s'
           pod = [[securityContext:[fsGroupChangePolicy:'OnRootMismatch', runAsUser:1000, runAsGroup:1000, fsGroup:1000]], [automountServiceAccountToken:false], [nodeSelector:'hub.jupyter.org/node-purpose=user'], [volumeClaim:'cephfs-shared-team', mountPath:'/shared/team'], [volumeClaim:'cephfs-shared-ro-public', mountPath:'/shared/public', readOnly:true]]
           queueSize = 30
        }

        k8s {
           runAsUser = 1000
           computeResourceType = 'Job'
        }

        
    aws {
    profile = "climb"
    
    client {
        endpoint = 'https://s3.climb.ac.uk'
        s3PathStyleAccess = true
        }
     }
        
        //params specific to paths on the climb system
        params{   
            bowtie2_index = "s3://microbial-bioin-sp3/bowtie_hg19"
            bowtie_index_name = "hg19_1kgmaj"
            kraken_db = "s3://microbial-bioin-sp3/kraken_pluspf_16gb/"
            afanc_myco_db = "s3://microbial-bioin-sp3/Mycobacteriaciae_DB_7.0/"
          
            resource_dir = "s3://microbial-bioin-sp3/lodestone_resources"
            refseq = "${resource_dir}/assembly_summary_refseq.txt"        
      }
    }
    
    singularity {
        includeConfig 'config/containers.config'

        singularity.enabled = 'true'
        singularity.autoMounts = 'true'

        //path to the singularity containers
        singularity.cacheDir = "${baseDir}/singularity"
    }

  sp3 {
  
    includeConfig 'config/containers.config'
    
    //add in singularity configs as the above config file is generic for any containerised run
    singularity.enabled = 'true'
    singularity.autoMounts = 'true'
    // path to the singularity containers
    singularity.cacheDir = "/data/images"

    process {
      scratch = true     
    }
 }


  docker {
    includeConfig 'config/containers.config'
    
    //add in docker configs as the above config file is generic for any containerised run
    docker.enabled = true
    fixOwnership = true
    runOptions = "-u \$(id -u):\$(id -g)"
  }
}
